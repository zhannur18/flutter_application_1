import 'package:flutter/material.dart';

void main() => runApp(const SpacedItemsList());

class Item {
  final int id;
  String name;
  String group;

  Item({required this.id, required this.name, required this.group});
}

class SpacedItemsList extends StatefulWidget {
  const SpacedItemsList({Key? key}) : super(key: key);

  @override
  _SpacedItemsListState createState() => _SpacedItemsListState();
}

class _SpacedItemsListState extends State<SpacedItemsList> {
  late List<Item> items;

  @override
  void initState() {
    super.initState();
    items = [
      Item(id: 1, name: 'Zan', group: 'SE-2218'),
      Item(id: 2, name: 'Sara', group: 'SE-2306'),
      Item(id: 3, name: 'Nur', group: 'CS-2209'),
      Item(id: 4, name: 'Laura', group: 'EE-2317'),
    ];
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        cardTheme: CardTheme(color: Colors.blue.shade50),
        useMaterial3: true,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Items List'),
        ),
        body: ListView.builder(
          itemCount: items.length,
          itemBuilder: (context, index) {
            return ItemWidget(
              item: items[index],
              onUpdate: () {
                _showUpdateModal(context, items[index]);
              },
              onDelete: () {
                _showDeleteConfirmation(context, items[index]);
              },
            );
          },
        ),
      ),
    );
  }

  void _showUpdateModal(BuildContext context, Item item) {
    final TextEditingController nameController =
        TextEditingController(text: item.name);
    final TextEditingController groupController =
        TextEditingController(text: item.group);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Update Item'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: nameController,
                decoration: InputDecoration(labelText: 'Name'),
              ),
              TextField(
                controller: groupController,
                decoration: InputDecoration(labelText: 'Group'),
              ),
            ],
          ),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                // Update item logic here
                setState(() {
                  item.name = nameController.text;
                  item.group = groupController.text;
                });
                Navigator.of(context).pop();
              },
              child: const Text('Update'),
            ),
          ],
        );
      },
    );
  }

  void _showDeleteConfirmation(BuildContext context, Item item) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirm Delete'),
          content: const Text('Are you sure you want to delete this item?'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                // Delete item logic here
                setState(() {
                  items.remove(item);
                });
                Navigator.of(context).pop();
              },
              child: const Text('Delete'),
            ),
          ],
        );
      },
    );
  }
}

class ItemWidget extends StatelessWidget {
  const ItemWidget({
    Key? key,
    required this.item,
    required this.onUpdate,
    required this.onDelete,
  }) : super(key: key);

  final Item item;
  final VoidCallback onUpdate;
  final VoidCallback onDelete;

  @override
  Widget build(BuildContext context) {
    return Card(
      child: ListTile(
        title: Text('ID: ${item.id}'),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Name: ${item.name}'),
            Text('Group: ${item.group}'),
          ],
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              onPressed: onUpdate,
              icon: Icon(Icons.edit),
            ),
            IconButton(
              onPressed: onDelete,
              icon: Icon(Icons.delete),
            ),
          ],
        ),
      ),
    );
  }
}
